<?php
/**
 * RobotCommand
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
/**
 * RobotCommand Class Doc Comment
 *
 * @category    Class
 * @description A Robot can make 3 actions contemporary: drive, scan, fire. If an action can not be performed, it will be ignored. If the drive action is not specified, the robot will continue moving according the last drive command.
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class RobotCommand implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'token' => 'string',
        'fire' => '\Swagger\Client\Model\FireCommand',
        'drive' => '\Swagger\Client\Model\DriveCommand',
        'scan' => '\Swagger\Client\Model\ScanCommand'
    );
  
    static function swaggerTypes() {
        return self::$swaggerTypes;
    }

    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'token' => 'token',
        'fire' => 'fire',
        'drive' => 'drive',
        'scan' => 'scan'
    );
  
    static function attributeMap() {
        return self::$attributeMap;
    }

    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'token' => 'setToken',
        'fire' => 'setFire',
        'drive' => 'setDrive',
        'scan' => 'setScan'
    );
  
    static function setters() {
        return self::$setters;
    }

    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'token' => 'getToken',
        'fire' => 'getFire',
        'drive' => 'getDrive',
        'scan' => 'getScan'
    );
  
    static function getters() {
        return self::$getters;
    }

    
    /**
      * $token A unique token, that changes after a command is sent from a robot to the server.\nIt is used for recognizing a robot, and chaining the commands, because a robot can not issue another command, before it receive an answer from the server, with the next token to use.\n
      * @var string
      */
    protected $token;
    
    /**
      * $fire 
      * @var \Swagger\Client\Model\FireCommand
      */
    protected $fire;
    
    /**
      * $drive 
      * @var \Swagger\Client\Model\DriveCommand
      */
    protected $drive;
    
    /**
      * $scan 
      * @var \Swagger\Client\Model\ScanCommand
      */
    protected $scan;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        
        if ($data != null) {
            $this->token = $data["token"];
            $this->fire = $data["fire"];
            $this->drive = $data["drive"];
            $this->scan = $data["scan"];
        }
    }
    
    /**
     * Gets token
     * @return string
     */
    public function getToken()
    {
        return $this->token;
    }
  
    /**
     * Sets token
     * @param string $token A unique token, that changes after a command is sent from a robot to the server.\nIt is used for recognizing a robot, and chaining the commands, because a robot can not issue another command, before it receive an answer from the server, with the next token to use.\n
     * @return $this
     */
    public function setToken($token)
    {
        
        $this->token = $token;
        return $this;
    }
    
    /**
     * Gets fire
     * @return \Swagger\Client\Model\FireCommand
     */
    public function getFire()
    {
        return $this->fire;
    }
  
    /**
     * Sets fire
     * @param \Swagger\Client\Model\FireCommand $fire 
     * @return $this
     */
    public function setFire($fire)
    {
        
        $this->fire = $fire;
        return $this;
    }
    
    /**
     * Gets drive
     * @return \Swagger\Client\Model\DriveCommand
     */
    public function getDrive()
    {
        return $this->drive;
    }
  
    /**
     * Sets drive
     * @param \Swagger\Client\Model\DriveCommand $drive 
     * @return $this
     */
    public function setDrive($drive)
    {
        
        $this->drive = $drive;
        return $this;
    }
    
    /**
     * Gets scan
     * @return \Swagger\Client\Model\ScanCommand
     */
    public function getScan()
    {
        return $this->scan;
    }
  
    /**
     * Sets scan
     * @param \Swagger\Client\Model\ScanCommand $scan 
     * @return $this
     */
    public function setScan($scan)
    {
        
        $this->scan = $scan;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
        }
    }
}
