=begin
NetRobots API

NetRobots REST API specification, using Swagger format.

OpenAPI spec version: 2.0

Generated by: https://github.com/swagger-api/swagger-codegen.git


=end

require 'date'

module SwaggerClient
  # Configurations of the robot.\nConfigurations can be sent during robot creation, or can be returned after robot creation.\n
  class RobotConfiguration
    attr_accessor :name

    # The initial health of the robot. Default value: 100.0
    attr_accessor :max_hit_points

    # Max speed of the robot. Default value: 27.0 m/s
    attr_accessor :max_speed

    # Acceleration of the robot. Default value 9.0 m/s^2
    attr_accessor :acceleration

    # The max deceleration in case of reduction of the speed. A negative number. Default value -5.0 m/s^2
    attr_accessor :decelleration

    # The maximim speed at which a robot can change direction.  Default value 13.0 m/s.\nIf the robot changes direction when it has a speed greater than this value, it start decelerating without changing direction, until it does not reach the steerling speed.\n
    attr_accessor :max_sterling_speed

    # The max distance the robot can identify targets. Default value: 700 m/s.
    attr_accessor :max_scan_distance

    # The max distance a bullet can reach. Default value: 700 m/s.
    attr_accessor :max_fire_distance

    # The speed of a fired bullet. Default value: 500 m/s.
    attr_accessor :bullet_speed

    # The max health damage a bullet can inflict when it reach exactly the target.\nDefault value: 10.0.\nActually max allowed value is 20 and minimum allowed value is 1.\nThe bullet hit exactly a target in case the explosion is within a certain distance, actually 2 meters.\nThe bullet can make a limited damage if it explodes near the target.\nThe limited damage decrease linearly from 10% to 0%, from 2 meters to 45 meters distance from the target.\nWhen you configure a robot, it is associated a strenght using an heuristic, based on robot configured characteristics.\nThen the bulletDamage is increased until it does not reach the maximum value respecting the maximum allowed robot strenght.\n
    attr_accessor :bullet_damage

    # How many seconds the robot must wait before firing another missile. Deafault value: 1.0 s\nActually this value must be within 1.0 s and 6.0 s\n
    attr_accessor :fire_reloading_time

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        
        :'name' => :'name',
        
        :'max_hit_points' => :'maxHitPoints',
        
        :'max_speed' => :'maxSpeed',
        
        :'acceleration' => :'acceleration',
        
        :'decelleration' => :'decelleration',
        
        :'max_sterling_speed' => :'maxSterlingSpeed',
        
        :'max_scan_distance' => :'maxScanDistance',
        
        :'max_fire_distance' => :'maxFireDistance',
        
        :'bullet_speed' => :'bulletSpeed',
        
        :'bullet_damage' => :'bulletDamage',
        
        :'fire_reloading_time' => :'fireReloadingTime'
        
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'name' => :'String',
        :'max_hit_points' => :'Float',
        :'max_speed' => :'Float',
        :'acceleration' => :'Float',
        :'decelleration' => :'Float',
        :'max_sterling_speed' => :'Float',
        :'max_scan_distance' => :'Float',
        :'max_fire_distance' => :'Float',
        :'bullet_speed' => :'Float',
        :'bullet_damage' => :'Float',
        :'fire_reloading_time' => :'Float'
        
      }
    end

    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.inject({}){|memo,(k,v)| memo[k.to_sym] = v; memo}

      
      if attributes[:'name']
        self.name = attributes[:'name']
      end
      
      if attributes[:'maxHitPoints']
        self.max_hit_points = attributes[:'maxHitPoints']
      end
      
      if attributes[:'maxSpeed']
        self.max_speed = attributes[:'maxSpeed']
      end
      
      if attributes[:'acceleration']
        self.acceleration = attributes[:'acceleration']
      end
      
      if attributes[:'decelleration']
        self.decelleration = attributes[:'decelleration']
      end
      
      if attributes[:'maxSterlingSpeed']
        self.max_sterling_speed = attributes[:'maxSterlingSpeed']
      end
      
      if attributes[:'maxScanDistance']
        self.max_scan_distance = attributes[:'maxScanDistance']
      end
      
      if attributes[:'maxFireDistance']
        self.max_fire_distance = attributes[:'maxFireDistance']
      end
      
      if attributes[:'bulletSpeed']
        self.bullet_speed = attributes[:'bulletSpeed']
      end
      
      if attributes[:'bulletDamage']
        self.bullet_damage = attributes[:'bulletDamage']
      end
      
      if attributes[:'fireReloadingTime']
        self.fire_reloading_time = attributes[:'fireReloadingTime']
      end
      
    end

    # Check equality by comparing each attribute.
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          name == o.name &&
          max_hit_points == o.max_hit_points &&
          max_speed == o.max_speed &&
          acceleration == o.acceleration &&
          decelleration == o.decelleration &&
          max_sterling_speed == o.max_sterling_speed &&
          max_scan_distance == o.max_scan_distance &&
          max_fire_distance == o.max_fire_distance &&
          bullet_speed == o.bullet_speed &&
          bullet_damage == o.bullet_damage &&
          fire_reloading_time == o.fire_reloading_time
    end

    # @see the `==` method
    def eql?(o)
      self == o
    end

    # Calculate hash code according to all attributes.
    def hash
      [name, max_hit_points, max_speed, acceleration, decelleration, max_sterling_speed, max_scan_distance, max_fire_distance, bullet_speed, bullet_damage, fire_reloading_time].hash
    end

    # build the object from hash
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          else
            #TODO show warning in debug mode
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        else
          # data not found in attributes(hash), not an issue as the data can be optional
        end
      end

      self
    end

    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /^(true|t|yes|y|1)$/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        _model = SwaggerClient.const_get(type).new
        _model.build_from_hash(value)
      end
    end

    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_body (backward compatibility))
    def to_body
      to_hash
    end

    # return the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Method to output non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
