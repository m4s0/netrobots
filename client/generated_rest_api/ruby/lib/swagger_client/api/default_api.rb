=begin
NetRobots API

NetRobots REST API specification, using Swagger format.

OpenAPI spec version: 2.0

Generated by: https://github.com/swagger-api/swagger-codegen.git


=end

require "uri"

module SwaggerClient
  class DefaultApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # 
    # send an action to a robot. The server will answer after the simulation turn is completed, and it will return the token for the next simulation turn.
    # @param command 
    # @param [Hash] opts the optional parameters
    # @return [RobotStatus]
    def robot_action_post(command, opts = {})
      data, status_code, headers = robot_action_post_with_http_info(command, opts)
      return data
    end

    # 
    # send an action to a robot. The server will answer after the simulation turn is completed, and it will return the token for the next simulation turn.
    # @param command 
    # @param [Hash] opts the optional parameters
    # @return [Array<(RobotStatus, Fixnum, Hash)>] RobotStatus data, response status code and response headers
    def robot_action_post_with_http_info(command, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#robot_action_post ..."
      end
      
      # verify the required parameter 'command' is set
      fail "Missing the required parameter 'command' when calling robot_action_post" if command.nil?
      
      # resource path
      local_var_path = "/robot-action".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = ['application/json']
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(command)
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RobotStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#robot_action_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Create a new robot.
    # @param configuration 
    # @param [Hash] opts the optional parameters
    # @return [RobotStatus]
    def robot_create_post(configuration, opts = {})
      data, status_code, headers = robot_create_post_with_http_info(configuration, opts)
      return data
    end

    # 
    # Create a new robot.
    # @param configuration 
    # @param [Hash] opts the optional parameters
    # @return [Array<(RobotStatus, Fixnum, Hash)>] RobotStatus data, response status code and response headers
    def robot_create_post_with_http_info(configuration, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#robot_create_post ..."
      end
      
      # verify the required parameter 'configuration' is set
      fail "Missing the required parameter 'configuration' when calling robot_create_post" if configuration.nil?
      
      # resource path
      local_var_path = "/robot-create".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = ['application/json']
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(configuration)
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RobotStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#robot_create_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Remove a robot.
    # @param remove 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def robot_remove_post(remove, opts = {})
      robot_remove_post_with_http_info(remove, opts)
      return nil
    end

    # 
    # Remove a robot.
    # @param remove 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def robot_remove_post_with_http_info(remove, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi#robot_remove_post ..."
      end
      
      # verify the required parameter 'remove' is set
      fail "Missing the required parameter 'remove' when calling robot_remove_post" if remove.nil?
      
      # resource path
      local_var_path = "/robot-remove".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      _header_accept = ['application/json']
      _header_accept_result = @api_client.select_header_accept(_header_accept) and header_params['Accept'] = _header_accept_result

      # HTTP header 'Content-Type'
      _header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(remove)
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#robot_remove_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
