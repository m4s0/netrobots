# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class RobotCommand(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        RobotCommand - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'token': 'str',
            'fire': 'FireCommand',
            'drive': 'DriveCommand',
            'scan': 'ScanCommand'
        }

        self.attribute_map = {
            'token': 'token',
            'fire': 'fire',
            'drive': 'drive',
            'scan': 'scan'
        }

        self._token = None
        self._fire = None
        self._drive = None
        self._scan = None

    @property
    def token(self):
        """
        Gets the token of this RobotCommand.
        A unique token, that changes after a command is sent from a robot to the server.\nIt is used for recognizing a robot, and chaining the commands, because a robot can not issue another command, before it receive an answer from the server, with the next token to use.\n

        :return: The token of this RobotCommand.
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """
        Sets the token of this RobotCommand.
        A unique token, that changes after a command is sent from a robot to the server.\nIt is used for recognizing a robot, and chaining the commands, because a robot can not issue another command, before it receive an answer from the server, with the next token to use.\n

        :param token: The token of this RobotCommand.
        :type: str
        """
        self._token = token

    @property
    def fire(self):
        """
        Gets the fire of this RobotCommand.


        :return: The fire of this RobotCommand.
        :rtype: FireCommand
        """
        return self._fire

    @fire.setter
    def fire(self, fire):
        """
        Sets the fire of this RobotCommand.


        :param fire: The fire of this RobotCommand.
        :type: FireCommand
        """
        self._fire = fire

    @property
    def drive(self):
        """
        Gets the drive of this RobotCommand.


        :return: The drive of this RobotCommand.
        :rtype: DriveCommand
        """
        return self._drive

    @drive.setter
    def drive(self, drive):
        """
        Sets the drive of this RobotCommand.


        :param drive: The drive of this RobotCommand.
        :type: DriveCommand
        """
        self._drive = drive

    @property
    def scan(self):
        """
        Gets the scan of this RobotCommand.


        :return: The scan of this RobotCommand.
        :rtype: ScanCommand
        """
        return self._scan

    @scan.setter
    def scan(self, scan):
        """
        Sets the scan of this RobotCommand.


        :param scan: The scan of this RobotCommand.
        :type: ScanCommand
        """
        self._scan = scan

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

