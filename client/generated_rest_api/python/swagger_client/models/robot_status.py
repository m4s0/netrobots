# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class RobotStatus(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        RobotStatus - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'name': 'str',
            'token': 'str',
            'configuration': 'RobotConfiguration',
            'simulation_time': 'float',
            'time_tick': 'float',
            'real_time_tick': 'float',
            'health': 'float',
            'is_dead': 'bool',
            'is_winner': 'bool',
            'is_well_specified_robot': 'bool',
            'direction': 'float',
            'speed': 'float',
            'pos_x': 'float',
            'pos_y': 'float',
            'cannon_reloading_time': 'float',
            'fired_new_missile': 'bool',
            'scan_status': 'ScanStatus'
        }

        self.attribute_map = {
            'name': 'name',
            'token': 'token',
            'configuration': 'configuration',
            'simulation_time': 'simulationTime',
            'time_tick': 'timeTick',
            'real_time_tick': 'realTimeTick',
            'health': 'health',
            'is_dead': 'isDead',
            'is_winner': 'isWinner',
            'is_well_specified_robot': 'isWellSpecifiedRobot',
            'direction': 'direction',
            'speed': 'speed',
            'pos_x': 'posX',
            'pos_y': 'posY',
            'cannon_reloading_time': 'cannonReloadingTime',
            'fired_new_missile': 'firedNewMissile',
            'scan_status': 'scanStatus'
        }

        self._name = None
        self._token = None
        self._configuration = None
        self._simulation_time = None
        self._time_tick = None
        self._real_time_tick = None
        self._health = None
        self._is_dead = None
        self._is_winner = None
        self._is_well_specified_robot = None
        self._direction = None
        self._speed = None
        self._pos_x = None
        self._pos_y = None
        self._cannon_reloading_time = None
        self._fired_new_missile = None
        self._scan_status = None

    @property
    def name(self):
        """
        Gets the name of this RobotStatus.


        :return: The name of this RobotStatus.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this RobotStatus.


        :param name: The name of this RobotStatus.
        :type: str
        """
        self._name = name

    @property
    def token(self):
        """
        Gets the token of this RobotStatus.
        A unique token, that changes after a command is sent from a robot to the server.\nIt is used for recognizing a robot, and chaining the commands, because a robot can not issue another command, before it receive an answer from the server, with the next token to use.\n

        :return: The token of this RobotStatus.
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """
        Sets the token of this RobotStatus.
        A unique token, that changes after a command is sent from a robot to the server.\nIt is used for recognizing a robot, and chaining the commands, because a robot can not issue another command, before it receive an answer from the server, with the next token to use.\n

        :param token: The token of this RobotStatus.
        :type: str
        """
        self._token = token

    @property
    def configuration(self):
        """
        Gets the configuration of this RobotStatus.


        :return: The configuration of this RobotStatus.
        :rtype: RobotConfiguration
        """
        return self._configuration

    @configuration.setter
    def configuration(self, configuration):
        """
        Sets the configuration of this RobotStatus.


        :param configuration: The configuration of this RobotStatus.
        :type: RobotConfiguration
        """
        self._configuration = configuration

    @property
    def simulation_time(self):
        """
        Gets the simulation_time of this RobotStatus.
        The current simulation time.

        :return: The simulation_time of this RobotStatus.
        :rtype: float
        """
        return self._simulation_time

    @simulation_time.setter
    def simulation_time(self, simulation_time):
        """
        Sets the simulation_time of this RobotStatus.
        The current simulation time.

        :param simulation_time: The simulation_time of this RobotStatus.
        :type: float
        """
        self._simulation_time = simulation_time

    @property
    def time_tick(self):
        """
        Gets the time_tick of this RobotStatus.
        The next command will be executed at simulationTime + this value. Usually it is a constant value for all the course of the simulation.

        :return: The time_tick of this RobotStatus.
        :rtype: float
        """
        return self._time_tick

    @time_tick.setter
    def time_tick(self, time_tick):
        """
        Sets the time_tick of this RobotStatus.
        The next command will be executed at simulationTime + this value. Usually it is a constant value for all the course of the simulation.

        :param time_tick: The time_tick of this RobotStatus.
        :type: float
        """
        self._time_tick = time_tick

    @property
    def real_time_tick(self):
        """
        Gets the real_time_tick of this RobotStatus.
        The time in seconds, the system waits before processing the next request from remote robots.\nWith slow nework connections this value should be higher, because otherwise some remote robots could miss some game turns.\nNOTE: this time differs from timeIncrement, because timeIncrement is the simulation time that pass between two robots commands.\n

        :return: The real_time_tick of this RobotStatus.
        :rtype: float
        """
        return self._real_time_tick

    @real_time_tick.setter
    def real_time_tick(self, real_time_tick):
        """
        Sets the real_time_tick of this RobotStatus.
        The time in seconds, the system waits before processing the next request from remote robots.\nWith slow nework connections this value should be higher, because otherwise some remote robots could miss some game turns.\nNOTE: this time differs from timeIncrement, because timeIncrement is the simulation time that pass between two robots commands.\n

        :param real_time_tick: The real_time_tick of this RobotStatus.
        :type: float
        """
        self._real_time_tick = real_time_tick

    @property
    def health(self):
        """
        Gets the health of this RobotStatus.
        The health of a robot. 0 when a robot is dead (completely destroyed).

        :return: The health of this RobotStatus.
        :rtype: float
        """
        return self._health

    @health.setter
    def health(self, health):
        """
        Sets the health of this RobotStatus.
        The health of a robot. 0 when a robot is dead (completely destroyed).

        :param health: The health of this RobotStatus.
        :type: float
        """
        self._health = health

    @property
    def is_dead(self):
        """
        Gets the is_dead of this RobotStatus.


        :return: The is_dead of this RobotStatus.
        :rtype: bool
        """
        return self._is_dead

    @is_dead.setter
    def is_dead(self, is_dead):
        """
        Sets the is_dead of this RobotStatus.


        :param is_dead: The is_dead of this RobotStatus.
        :type: bool
        """
        self._is_dead = is_dead

    @property
    def is_winner(self):
        """
        Gets the is_winner of this RobotStatus.


        :return: The is_winner of this RobotStatus.
        :rtype: bool
        """
        return self._is_winner

    @is_winner.setter
    def is_winner(self, is_winner):
        """
        Sets the is_winner of this RobotStatus.


        :param is_winner: The is_winner of this RobotStatus.
        :type: bool
        """
        self._is_winner = is_winner

    @property
    def is_well_specified_robot(self):
        """
        Gets the is_well_specified_robot of this RobotStatus.
        true if the robot creation params respect the constraints.

        :return: The is_well_specified_robot of this RobotStatus.
        :rtype: bool
        """
        return self._is_well_specified_robot

    @is_well_specified_robot.setter
    def is_well_specified_robot(self, is_well_specified_robot):
        """
        Sets the is_well_specified_robot of this RobotStatus.
        true if the robot creation params respect the constraints.

        :param is_well_specified_robot: The is_well_specified_robot of this RobotStatus.
        :type: bool
        """
        self._is_well_specified_robot = is_well_specified_robot

    @property
    def direction(self):
        """
        Gets the direction of this RobotStatus.
        Direction expressed in degrees. 0 degree is EAST, 90 degree is NORTH, 180 degree is WEST, 279 degree is SOUTH

        :return: The direction of this RobotStatus.
        :rtype: float
        """
        return self._direction

    @direction.setter
    def direction(self, direction):
        """
        Sets the direction of this RobotStatus.
        Direction expressed in degrees. 0 degree is EAST, 90 degree is NORTH, 180 degree is WEST, 279 degree is SOUTH

        :param direction: The direction of this RobotStatus.
        :type: float
        """
        self._direction = direction

    @property
    def speed(self):
        """
        Gets the speed of this RobotStatus.


        :return: The speed of this RobotStatus.
        :rtype: float
        """
        return self._speed

    @speed.setter
    def speed(self, speed):
        """
        Sets the speed of this RobotStatus.


        :param speed: The speed of this RobotStatus.
        :type: float
        """
        self._speed = speed

    @property
    def pos_x(self):
        """
        Gets the pos_x of this RobotStatus.


        :return: The pos_x of this RobotStatus.
        :rtype: float
        """
        return self._pos_x

    @pos_x.setter
    def pos_x(self, pos_x):
        """
        Sets the pos_x of this RobotStatus.


        :param pos_x: The pos_x of this RobotStatus.
        :type: float
        """
        self._pos_x = pos_x

    @property
    def pos_y(self):
        """
        Gets the pos_y of this RobotStatus.


        :return: The pos_y of this RobotStatus.
        :rtype: float
        """
        return self._pos_y

    @pos_y.setter
    def pos_y(self, pos_y):
        """
        Sets the pos_y of this RobotStatus.


        :param pos_y: The pos_y of this RobotStatus.
        :type: float
        """
        self._pos_y = pos_y

    @property
    def cannon_reloading_time(self):
        """
        Gets the cannon_reloading_time of this RobotStatus.
        0 if the robot can fire immediately, the remaining time it must wait otherwise.

        :return: The cannon_reloading_time of this RobotStatus.
        :rtype: float
        """
        return self._cannon_reloading_time

    @cannon_reloading_time.setter
    def cannon_reloading_time(self, cannon_reloading_time):
        """
        Sets the cannon_reloading_time of this RobotStatus.
        0 if the robot can fire immediately, the remaining time it must wait otherwise.

        :param cannon_reloading_time: The cannon_reloading_time of this RobotStatus.
        :type: float
        """
        self._cannon_reloading_time = cannon_reloading_time

    @property
    def fired_new_missile(self):
        """
        Gets the fired_new_missile of this RobotStatus.
        True if the robot in last command fired a missile.

        :return: The fired_new_missile of this RobotStatus.
        :rtype: bool
        """
        return self._fired_new_missile

    @fired_new_missile.setter
    def fired_new_missile(self, fired_new_missile):
        """
        Sets the fired_new_missile of this RobotStatus.
        True if the robot in last command fired a missile.

        :param fired_new_missile: The fired_new_missile of this RobotStatus.
        :type: bool
        """
        self._fired_new_missile = fired_new_missile

    @property
    def scan_status(self):
        """
        Gets the scan_status of this RobotStatus.


        :return: The scan_status of this RobotStatus.
        :rtype: ScanStatus
        """
        return self._scan_status

    @scan_status.setter
    def scan_status(self, scan_status):
        """
        Sets the scan_status of this RobotStatus.


        :param scan_status: The scan_status of this RobotStatus.
        :type: ScanStatus
        """
        self._scan_status = scan_status

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

