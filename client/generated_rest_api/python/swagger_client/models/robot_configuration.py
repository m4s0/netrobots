# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class RobotConfiguration(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        RobotConfiguration - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'name': 'str',
            'max_hit_points': 'float',
            'max_speed': 'float',
            'acceleration': 'float',
            'decelleration': 'float',
            'max_sterling_speed': 'float',
            'max_scan_distance': 'float',
            'max_fire_distance': 'float',
            'bullet_speed': 'float',
            'bullet_damage': 'float',
            'fire_reloading_time': 'float'
        }

        self.attribute_map = {
            'name': 'name',
            'max_hit_points': 'maxHitPoints',
            'max_speed': 'maxSpeed',
            'acceleration': 'acceleration',
            'decelleration': 'decelleration',
            'max_sterling_speed': 'maxSterlingSpeed',
            'max_scan_distance': 'maxScanDistance',
            'max_fire_distance': 'maxFireDistance',
            'bullet_speed': 'bulletSpeed',
            'bullet_damage': 'bulletDamage',
            'fire_reloading_time': 'fireReloadingTime'
        }

        self._name = None
        self._max_hit_points = None
        self._max_speed = None
        self._acceleration = None
        self._decelleration = None
        self._max_sterling_speed = None
        self._max_scan_distance = None
        self._max_fire_distance = None
        self._bullet_speed = None
        self._bullet_damage = None
        self._fire_reloading_time = None

    @property
    def name(self):
        """
        Gets the name of this RobotConfiguration.


        :return: The name of this RobotConfiguration.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this RobotConfiguration.


        :param name: The name of this RobotConfiguration.
        :type: str
        """
        self._name = name

    @property
    def max_hit_points(self):
        """
        Gets the max_hit_points of this RobotConfiguration.
        The initial health of the robot. Default value: 100.0

        :return: The max_hit_points of this RobotConfiguration.
        :rtype: float
        """
        return self._max_hit_points

    @max_hit_points.setter
    def max_hit_points(self, max_hit_points):
        """
        Sets the max_hit_points of this RobotConfiguration.
        The initial health of the robot. Default value: 100.0

        :param max_hit_points: The max_hit_points of this RobotConfiguration.
        :type: float
        """
        self._max_hit_points = max_hit_points

    @property
    def max_speed(self):
        """
        Gets the max_speed of this RobotConfiguration.
        Max speed of the robot. Default value: 27.0 m/s

        :return: The max_speed of this RobotConfiguration.
        :rtype: float
        """
        return self._max_speed

    @max_speed.setter
    def max_speed(self, max_speed):
        """
        Sets the max_speed of this RobotConfiguration.
        Max speed of the robot. Default value: 27.0 m/s

        :param max_speed: The max_speed of this RobotConfiguration.
        :type: float
        """
        self._max_speed = max_speed

    @property
    def acceleration(self):
        """
        Gets the acceleration of this RobotConfiguration.
        Acceleration of the robot. Default value 9.0 m/s^2

        :return: The acceleration of this RobotConfiguration.
        :rtype: float
        """
        return self._acceleration

    @acceleration.setter
    def acceleration(self, acceleration):
        """
        Sets the acceleration of this RobotConfiguration.
        Acceleration of the robot. Default value 9.0 m/s^2

        :param acceleration: The acceleration of this RobotConfiguration.
        :type: float
        """
        self._acceleration = acceleration

    @property
    def decelleration(self):
        """
        Gets the decelleration of this RobotConfiguration.
        The max deceleration in case of reduction of the speed. A negative number. Default value -5.0 m/s^2

        :return: The decelleration of this RobotConfiguration.
        :rtype: float
        """
        return self._decelleration

    @decelleration.setter
    def decelleration(self, decelleration):
        """
        Sets the decelleration of this RobotConfiguration.
        The max deceleration in case of reduction of the speed. A negative number. Default value -5.0 m/s^2

        :param decelleration: The decelleration of this RobotConfiguration.
        :type: float
        """
        self._decelleration = decelleration

    @property
    def max_sterling_speed(self):
        """
        Gets the max_sterling_speed of this RobotConfiguration.
        The maximim speed at which a robot can change direction.  Default value 13.0 m/s.\nIf the robot changes direction when it has a speed greater than this value, it start decelerating without changing direction, until it does not reach the steerling speed.\n

        :return: The max_sterling_speed of this RobotConfiguration.
        :rtype: float
        """
        return self._max_sterling_speed

    @max_sterling_speed.setter
    def max_sterling_speed(self, max_sterling_speed):
        """
        Sets the max_sterling_speed of this RobotConfiguration.
        The maximim speed at which a robot can change direction.  Default value 13.0 m/s.\nIf the robot changes direction when it has a speed greater than this value, it start decelerating without changing direction, until it does not reach the steerling speed.\n

        :param max_sterling_speed: The max_sterling_speed of this RobotConfiguration.
        :type: float
        """
        self._max_sterling_speed = max_sterling_speed

    @property
    def max_scan_distance(self):
        """
        Gets the max_scan_distance of this RobotConfiguration.
        The max distance the robot can identify targets. Default value: 700 m/s.

        :return: The max_scan_distance of this RobotConfiguration.
        :rtype: float
        """
        return self._max_scan_distance

    @max_scan_distance.setter
    def max_scan_distance(self, max_scan_distance):
        """
        Sets the max_scan_distance of this RobotConfiguration.
        The max distance the robot can identify targets. Default value: 700 m/s.

        :param max_scan_distance: The max_scan_distance of this RobotConfiguration.
        :type: float
        """
        self._max_scan_distance = max_scan_distance

    @property
    def max_fire_distance(self):
        """
        Gets the max_fire_distance of this RobotConfiguration.
        The max distance a bullet can reach. Default value: 700 m/s.

        :return: The max_fire_distance of this RobotConfiguration.
        :rtype: float
        """
        return self._max_fire_distance

    @max_fire_distance.setter
    def max_fire_distance(self, max_fire_distance):
        """
        Sets the max_fire_distance of this RobotConfiguration.
        The max distance a bullet can reach. Default value: 700 m/s.

        :param max_fire_distance: The max_fire_distance of this RobotConfiguration.
        :type: float
        """
        self._max_fire_distance = max_fire_distance

    @property
    def bullet_speed(self):
        """
        Gets the bullet_speed of this RobotConfiguration.
        The speed of a fired bullet. Default value: 500 m/s.

        :return: The bullet_speed of this RobotConfiguration.
        :rtype: float
        """
        return self._bullet_speed

    @bullet_speed.setter
    def bullet_speed(self, bullet_speed):
        """
        Sets the bullet_speed of this RobotConfiguration.
        The speed of a fired bullet. Default value: 500 m/s.

        :param bullet_speed: The bullet_speed of this RobotConfiguration.
        :type: float
        """
        self._bullet_speed = bullet_speed

    @property
    def bullet_damage(self):
        """
        Gets the bullet_damage of this RobotConfiguration.
        The max health damage a bullet can inflict when it reach exactly the target.\nDefault value: 10.0.\nActually max allowed value is 20 and minimum allowed value is 1.\nThe bullet hit exactly a target in case the explosion is within a certain distance, actually 2 meters.\nThe bullet can make a limited damage if it explodes near the target.\nThe limited damage decrease linearly from 10% to 0%, from 2 meters to 45 meters distance from the target.\nWhen you configure a robot, it is associated a strenght using an heuristic, based on robot configured characteristics.\nThen the bulletDamage is increased until it does not reach the maximum value respecting the maximum allowed robot strenght.\n

        :return: The bullet_damage of this RobotConfiguration.
        :rtype: float
        """
        return self._bullet_damage

    @bullet_damage.setter
    def bullet_damage(self, bullet_damage):
        """
        Sets the bullet_damage of this RobotConfiguration.
        The max health damage a bullet can inflict when it reach exactly the target.\nDefault value: 10.0.\nActually max allowed value is 20 and minimum allowed value is 1.\nThe bullet hit exactly a target in case the explosion is within a certain distance, actually 2 meters.\nThe bullet can make a limited damage if it explodes near the target.\nThe limited damage decrease linearly from 10% to 0%, from 2 meters to 45 meters distance from the target.\nWhen you configure a robot, it is associated a strenght using an heuristic, based on robot configured characteristics.\nThen the bulletDamage is increased until it does not reach the maximum value respecting the maximum allowed robot strenght.\n

        :param bullet_damage: The bullet_damage of this RobotConfiguration.
        :type: float
        """
        self._bullet_damage = bullet_damage

    @property
    def fire_reloading_time(self):
        """
        Gets the fire_reloading_time of this RobotConfiguration.
        How many seconds the robot must wait before firing another missile. Deafault value: 1.0 s\nActually this value must be within 1.0 s and 6.0 s\n

        :return: The fire_reloading_time of this RobotConfiguration.
        :rtype: float
        """
        return self._fire_reloading_time

    @fire_reloading_time.setter
    def fire_reloading_time(self, fire_reloading_time):
        """
        Sets the fire_reloading_time of this RobotConfiguration.
        How many seconds the robot must wait before firing another missile. Deafault value: 1.0 s\nActually this value must be within 1.0 s and 6.0 s\n

        :param fire_reloading_time: The fire_reloading_time of this RobotConfiguration.
        :type: float
        """
        self._fire_reloading_time = fire_reloading_time

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

